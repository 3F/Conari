<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\common.props" />

  <PropertyGroup>
    <Version>1.4.0</Version>
    <BuildInfoVSSBE></BuildInfoVSSBE>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>$(ConariTFM)</TargetFrameworks>
    <RootNamespace>net.r_eg.Conari</RootNamespace>
    <AssemblyName>Conari</AssemblyName>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>..\com.github.3F.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>Conari</PackageId>
    <Copyright>Copyright (c) 2016-2021  Denis Kuzmin &lt;x-3F@outlook.com&gt; github/3F</Copyright>
    <Title>[ Conari ] 🧬 One-touch unmanaged memory, runtime dynamic use of the unmanaged native C/C++ in .NET world, and ...</Title>
    <PackageIcon>Conari_v1.png</PackageIcon>
    <IconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</IconUrl>
    <Description>🧬 One-touch unmanaged memory, libraries, executable modules, runtime dynamic use of the unmanaged native C/C++ in .NET world, related P/Invoke features,
            and ... Even accessing to complex types like structures without their declaration at all.

        ## Why Conari ?

        It was designed to be loyal to your needs on the fly!

        🧰 Powerful types

        ```
        using ConariL l = new("regXwild.dll");
        l._.replace&lt;bool&gt;
        (
            l._T("number = 888;", out CharPtr result), 
            l._T("+??;"), l._T("2034;")
        ); // result: number = 2034;
        ```

        🔨 Its amazing DLR features

        Conari will generate and adapt everything at runtime! Specially for you!

        🔧 The easiest (most ever) access to any data in unmanaged memory

        ```
        ptr.Native().f&lt;int&gt;("x", "y").build(out dynamic l);
        l.x // 17
        l.y // -23
        ```

        🏄 Most powerful PInvoke and even most convenient use of WinAPI without preparing something

        For example, below we don't provide neither *user32.ShowWindow()* nor *user32.MessageBoxA(),* even no *kernel32.GetModuleHandleA/W()*

        ```
        dynamic user32 = new User32();

            user32.ShowWindow(0x000A0A28, 3);
            user32.MessageBoxA(0, "Conari in action", "Hello!", 0);
        ```

        🚀 Awesome speed

        test of regXwild's algorithms [[340x10000 Unicode](https://github.com/3F/regXwild#speed)]

        🍰 MIT License! Enjoy.

        . . . Read more: https://github.com/3F/Conari

        _ _ _ _ _ _
        
        
    =======================================
    gnt /p:ngpackages="Conari/$(Version)"
    ================== https://github.com/3F/GetNuTool


    $(BuildInfoVSSBE)
    </Description>
    <PackageOwners>reg</PackageOwners>
    <PackageProjectUrl>https://github.com/3F/Conari</PackageProjectUrl>
    <RepositoryUrl>https://github.com/3F/Conari</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>memory unmanaged-memory runtime libraries exported-functions DllExport unmanaged exports native pinvoke DllImport exported-variables pinvoke-wrapper dynamic-runtime unmanaged-code binder binary-data binding unmanaged-function export import API dll cpp hack dotnet dotnetcore pe32 pe32-plus pe64 Lua 7z 7zip Conari</PackageTags>
    <PackageReleaseNotes> changelog: https://github.com/3F/Conari/blob/master/changelog.txt </PackageReleaseNotes>
    <Authors>github.com/3F/Conari</Authors>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <NeutralLanguage>en</NeutralLanguage>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest</AnalysisLevel>
    <AnalysisMode>Default</AnalysisMode>
    <NoWarn>1701;1702;CS1591;IDE1006</NoWarn>
    <LangVersion>latest</LangVersion>
    <PackageIconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</PackageIconUrl>
  </PropertyGroup>

  <PropertyGroup>
    <IsNetCoreFamilyTarget>true</IsNetCoreFamilyTarget>
    <IsNetCoreFamilyTarget Condition="$(TargetFramework.StartsWith('net4')) == 'true'">false</IsNetCoreFamilyTarget>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE;$(DefineConstants)</DefineConstants>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' Or '$(Configuration)' == 'PublicRelease' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants Condition="'$(IsNetCoreFamilyTarget)' == 'true'">NETCORE;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition="'$(TargetFramework)' == 'netstandard2.0'">NETSTD20;NETSTD;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition="'$(TargetFramework)' == 'net40'">NET40;$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <NoDefaultExcludes>true</NoDefaultExcludes> <!-- NU5119: ..\.version -->
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE" Pack="true" PackagePath="" />
    <None Include="..\Readme.md" Pack="true" PackagePath="" />
    <None Include="..\3rd-party-notices.txt" Pack="true" PackagePath="" />
    <None Include="..\changelog.txt" Pack="true" PackagePath="" />
    <None Include="..\.version" Pack="true" PackagePath="" />
    <None Include="..\$(RootObjDir)\build-info.txt" Condition="Exists('..\$(RootObjDir)\build-info.txt')" Pack="true" PackagePath="" />
    <None Include="Resources/Conari_v1.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\tools\hMSBuild.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\tools\gnt.bat" Pack="true" PackagePath="tools\" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' != 'true'">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(PathToUnmanagedEmitCalli)*.cs" Link="UnmanagedEmitCalli\%(Filename)%(Extension)" />
    <Compile Remove="$(PathToUnmanagedEmitCalli)InternalsVisibleTo.cs" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources\Msg.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Msg.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\Msg.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Msg.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

</Project>