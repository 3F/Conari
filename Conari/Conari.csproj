<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>1.3.0</Version>
    <BuildInfoVSSBE></BuildInfoVSSBE>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>net40;net472;netstandard2.0;netcoreapp2.1;netstandard2.1</TargetFrameworks>
    <RootNamespace>net.r_eg.Conari</RootNamespace>
    <AssemblyName>Conari</AssemblyName>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Copyright>Copyright (c) 2016-2019  Denis Kuzmin &lt; entry.reg@gmail.com &gt; GitHub/3F</Copyright>
    <Title>[ Conari ] Binder of Unmanaged native data</Title>
    <PackageIcon>Conari_v1.png</PackageIcon>
    <IconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</IconUrl>
    <Description>
        Conari engine represents powerful platform for work with unmanaged memory, pe-modules, and their data: Libraries, Executable Modules, other native (C/C++, ...) and raw binary data.

        Lightweight and flexible binding, even accessing to complex types like structures without their declaration at all.
        Also contains wrappers for types like unmanaged structures, unmanaged strings, and much more.

        ```
          using(var l = new ConariL("...")) {
              // ...
          }
        ```
        ```
          // DLR and unmanaged functions:
          d.test&lt;IntPtr&gt;();
          d.avcodec_find_encoder&lt;IntPtr&gt;(AV_CODEC_ID_MP2);
          d.push();
          d.create&lt;int&gt;(ref cid, out data);
        ```
        ```
          // custom lambda requests:
          l.bind&lt;Action&lt;int, int&gt;&gt;("call")(2, 1);
          double num = l.bind&lt;Func&lt;IntPtr, int, double&gt;&gt;("tonumber")(L, 4);
        ```

        . . . And more: https://github.com/3F/Conari

        _ _ _ _ _ _
        MIT License! Enjoy.
        
        
    =======================================
    gnt /p:ngpackages="Conari/$(Version)"
    ================== https://github.com/3F/GetNuTool

    Build info:

    $(BuildInfoVSSBE)
    </Description>
    <PackageOwners>reg</PackageOwners>
    <PackageProjectUrl>https://github.com/3F/Conari</PackageProjectUrl>
    <RepositoryUrl>https://github.com/3F/Conari</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>memory unmanaged-memory exported-function DllExport unmanaged exports native c-func DllImport unmanaged-code binder binding pe-modules unmanaged-function exported-c-function export API dll cpp clang dotnet csharp pe32 pe64 pemodule Lua 7z 7zip Conari</PackageTags>
    <PackageReleaseNotes> changelog: https://github.com/3F/Conari/blob/master/changelog.txt </PackageReleaseNotes>
    <Authors>github.com/3F/Conari</Authors>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <NoWarn>1701;1702;CS1591;IDE1006</NoWarn>
    <LangVersion>latest</LangVersion>
    <PackageIconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</PackageIconUrl>
  </PropertyGroup>

  <PropertyGroup>
    <IsNetCoreFamilyTarget>false</IsNetCoreFamilyTarget>
    <IsNetCoreFamilyTarget Condition="$(TargetFramework.StartsWith('nets')) Or $(TargetFramework.StartsWith('netc'))">true</IsNetCoreFamilyTarget>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' Or '$(Configuration)' == 'PublicRelease' ">
    <DefineConstants />
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <DefineConstants>$(DefineConstants);NETCORE</DefineConstants>
    <DefineConstants Condition=" '$(TargetFramework)' == 'netstandard2.0' ">$(DefineConstants);NETSTD20</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE" Pack="true" PackagePath="" />
    <None Include="..\Readme.md" Pack="true" PackagePath="" />
    <None Include="..\3rd-party.txt" Pack="true" PackagePath="" />
    <None Include="..\changelog.txt" Pack="true" PackagePath="" />
    <None Include="..\.version" Pack="true" PackagePath="" />
    <!-- NuGet bug when naming with 'build' keyword: https://github.com/NuGet/Home/issues/8810 -->
    <None Include="obj\release-info.txt" Condition="Exists('obj\release-info.txt')" Pack="true" PackagePath="" />
    <None Include="Resources/Conari_v1.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\tools\hMSBuild.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\tools\gnt.bat" Pack="true" PackagePath="tools\" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' != 'true'">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <PackageReference Include="Microsoft.CSharp" Version="4.6.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.6.0" />
    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.6.0" />
  </ItemGroup>

</Project>