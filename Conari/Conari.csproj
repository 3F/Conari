<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\common.props" />

  <PropertyGroup>
    <Version>1.4.0</Version>
    <BuildInfoVSSBE></BuildInfoVSSBE>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>net40;net472;netstandard2.0;netcoreapp2.1;netstandard2.1</TargetFrameworks>
    <RootNamespace>net.r_eg.Conari</RootNamespace>
    <AssemblyName>Conari</AssemblyName>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>..\com.github.3F.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>Conari</PackageId>
    <Copyright>Copyright (c) 2016-2021  Denis Kuzmin &lt;x-3F@outlook.com&gt; github/3F</Copyright>
    <Title>[ Conari ] platform for unmanaged memory, pe-modules, PInvoke and more</Title>
    <PackageIcon>Conari_v1.png</PackageIcon>
    <IconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</IconUrl>
    <Description>
        🧬 An unmanaged memory, modules, and raw data in one touch.

        Conari engine represents most flexible platform for working with unmanaged memory, modules, related P/Invoke features, and more around libraries, executable modules, runtime dynamic use of the unmanaged native C/C++ in .NET world and other raw data just in a few easy steps without configuring something, and... Even accessing to complex types like structures without their declaration at all.

        ## Why Conari ?

        It was designed to be loyal to your needs on the fly.

        🔍 Easy to start:

        ```
        using(var l = new ConariL("...")) {
            // ...
        }
        ```

        🚀 Awesome speed:

        test of regXwild's algorithms [[340x10000 Unicode](https://github.com/3F/regXwild/blob/d9e4cd18e6f3fbc29b271b1feb4d8c659aa14bd7/Readme.md#speed-comparison)]

        🔨 Its amazing DLR features:

        ```
        using(dynamic l = new ConariX("..."))
        {
            // just everything is yours ~
            l.curl_easy_setopt(curl, 10002, "http://example.com");
        }
        ```

        🔧 Raw accessibility to any binary data in unmanaged memory:

        ```
        ptr.Native().align&lt;int&gt;(2, "x", "y")
                    .t&lt;IntPtr&gt;("data")
                    .Raw;
        ```

        🏄 Most powerful PInvoke and even most convenient use of WinAPI. Our recipe is simple: *Just use it!*

        ```
        dynamic user32 = new User32();

            user32.ShowWindow(0x000A0A28, 3);
            user32.MessageBoxA(0, "Conari in action", "Hello!", 0);
        ```

        ```
        dynamic kernel32 = new Kernel32();

            kernel32.GetModuleHandleA&lt;IntPtr&gt;("libcurl-x64");
            kernel32.GetModuleHandleW&lt;IntPtr&gt;((WCharPtr)ustr);
        ```

        **Important note:** Conari does not provide anything from above. It will just generate and adapt everything at runtime. Specially for you!

        🔖 Modern **.NET Core**

        Conari is ready for .NET Core starting from 1.4.

        But we have even more, again. https://github.com/3F/Conari/issues/13
        Conari also provides support for [ .NET Standard 2.0 ] layer which does not cover unmanaged EmitCalli due to missed implementation for System.Private.CoreLib.

        🍰 MIT License! Enjoy.

        . . . And more: https://github.com/3F/Conari

        _ _ _ _ _ _
        
        
    =======================================
    gnt /p:ngpackages="Conari/$(Version)"
    ================== https://github.com/3F/GetNuTool

    Build info:

    $(BuildInfoVSSBE)
    </Description>
    <PackageOwners>reg</PackageOwners>
    <PackageProjectUrl>https://github.com/3F/Conari</PackageProjectUrl>
    <RepositoryUrl>https://github.com/3F/Conari</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>memory unmanaged-memory exported-function DllExport unmanaged exports native c-func DllImport unmanaged-code binder binding pe-modules unmanaged-function exported-c-function export API dll cpp clang dotnet csharp pe32 pe64 pemodule Lua 7z 7zip Conari</PackageTags>
    <PackageReleaseNotes> changelog: https://github.com/3F/Conari/blob/master/changelog.txt </PackageReleaseNotes>
    <Authors>github.com/3F/Conari</Authors>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <NoWarn>1701;1702;CS1591;IDE1006</NoWarn>
    <LangVersion>latest</LangVersion>
    <PackageIconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</PackageIconUrl>
  </PropertyGroup>

  <PropertyGroup>
    <IsNetCoreFamilyTarget>false</IsNetCoreFamilyTarget>
    <IsNetCoreFamilyTarget Condition="$(TargetFramework.StartsWith('nets')) Or $(TargetFramework.StartsWith('netc'))">true</IsNetCoreFamilyTarget>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' Or '$(Configuration)' == 'PublicRelease' ">
    <DefineConstants />
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <DefineConstants>$(DefineConstants);NETCORE</DefineConstants>
    <DefineConstants Condition=" '$(TargetFramework)' == 'netstandard2.0' ">$(DefineConstants);NETSTD20</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <NoDefaultExcludes>true</NoDefaultExcludes> <!-- NU5119: ..\.version -->
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE" Pack="true" PackagePath="" />
    <None Include="..\Readme.md" Pack="true" PackagePath="" />
    <None Include="..\3rd-party-notices.txt" Pack="true" PackagePath="" />
    <None Include="..\changelog.txt" Pack="true" PackagePath="" />
    <None Include="..\.version" Pack="true" PackagePath="" />
    <None Include="..\$(RootObjDir)\build-info.txt" Condition="Exists('..\$(RootObjDir)\build-info.txt')" Pack="true" PackagePath="" />
    <None Include="Resources/Conari_v1.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\tools\hMSBuild.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\tools\gnt.bat" Pack="true" PackagePath="tools\" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' != 'true'">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0" />
  </ItemGroup>

</Project>