<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\common.props" />

  <PropertyGroup>
    <Version>1.5.0</Version>
    <BuildInfoVSSBE></BuildInfoVSSBE>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>$(ConariTFM)</TargetFrameworks>
    <RootNamespace>net.r_eg.Conari</RootNamespace>
    <AssemblyName>Conari</AssemblyName>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>..\com.github.3F.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>$(ConariGeneratePackageOnBuild)</GeneratePackageOnBuild>
    <PackageId>Conari</PackageId>
    <Copyright>Copyright (c) 2016-2024  Denis Kuzmin &lt;x-3F@outlook.com&gt; github/3F</Copyright>
    <PackageIcon>Conari_v1.png</PackageIcon>
    <IconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</IconUrl>
    <Description>🧬 An unmanaged memory, modules, and raw data in one-touch.

        It was designed to be loyal to your needs on the fly!

        Conari engine represents most flexible platform for working with unmanaged memory, modules, related P/Invoke features, and more around libraries, executable modules, runtime dynamic use of the unmanaged native C/C++ in .NET world and other raw data just in a few easy steps without configuring something, and...
        Even accessing to complex types like structures without their declaration at all.

        ```
        using dynamic l = new ConariX("regXwild.dll");

        string data = "number = 888;";
        bool found = l.replace&lt;bool&gt;(ref data, "+??;", "2034;");
        // found: true; data: number = 2034;
        ```

        Conari will generate and adapt everything at runtime.

        ```
        ptr.Native().f&lt;int&gt;("x", "y").build(out dynamic l);
        l.x // 17
        l.y // -23
        ```

        💡 https://github.com/3F/Conari/wiki/Quick-start

        🍰 MIT License! Enjoy.

        . . . https://github.com/3F/Conari
        
        
    ===
    gnt Conari/$(Version)
    https://github.com/3F/GetNuTool


    $(BuildInfoVSSBE)
    </Description>

    <PackageTags>memory unmanaged-memory runtime libraries exported-functions DllExport unmanaged exports native pinvoke DllImport exported-variables pinvoke-wrapper dynamic-runtime unmanaged-code binder binary-data binding unmanaged-function export import API dll cpp hack dotnet dotnetcore pe32 pe32-plus pe64 Lua 7z 7zip Conari</PackageTags>
    <PackageReleaseNotes> changelog: https://github.com/3F/Conari/blob/master/changelog.txt </PackageReleaseNotes>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <NeutralLanguage>en</NeutralLanguage>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest</AnalysisLevel>
    <AnalysisMode>Default</AnalysisMode>
    <NoWarn>1701;1702;CS1591;IDE1006</NoWarn>
    <PackageIconUrl>https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png</PackageIconUrl>
  </PropertyGroup>

  <PropertyGroup>
    <NoDefaultExcludes>true</NoDefaultExcludes> <!-- NU5119: ..\.version -->
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE.txt" Pack="true" PackagePath="" />
    <None Include="..\Readme.md" Pack="true" PackagePath="" />
    <None Include="..\3rd-party-NOTICES.txt" Pack="true" PackagePath="" />
    <None Include="..\changelog.txt" Pack="true" PackagePath="" />
    <None Include="..\.version" Pack="true" PackagePath="" />
    <None Include="..\$(RootObjDir)\build-info.txt" Condition="Exists('..\$(RootObjDir)\build-info.txt')" Pack="true" PackagePath="" />
    <None Include="Resources/Conari_v1.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\.tools\hMSBuild.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\.tools\gnt.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\.tools\netfx4sdk.cmd" Pack="true" PackagePath="tools\" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' != 'true'">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(PathToUnmanagedEmitCalli)*.cs" Link="UnmanagedEmitCalli\%(Filename)%(Extension)" />
    <Compile Remove="$(PathToUnmanagedEmitCalli)InternalsVisibleTo.cs" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources\Msg.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Msg.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\Msg.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Msg.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

</Project>