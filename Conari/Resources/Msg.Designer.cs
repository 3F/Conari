//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace net.r_eg.Conari.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Msg {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Msg() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("net.r_eg.Conari.Resources.Msg", typeof(Msg).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activate PE impl first..
        /// </summary>
        internal static string activate_pe {
            get {
                return ResourceManager.GetString("activate_pe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument `{0}` is empty or null..
        /// </summary>
        internal static string arg_0_empty_or_null {
            get {
                return ResourceManager.GetString("arg_0_empty_or_null", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pointer must be a non-zero.
        /// </summary>
        internal static string arg_pointer_zero {
            get {
                return ResourceManager.GetString("arg_pointer_zero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot be re-allocated..
        /// </summary>
        internal static string cannot_realloc {
            get {
                return ResourceManager.GetString("cannot_realloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can be configured once before any first call for the whole assembly..
        /// </summary>
        internal static string configure_once {
            get {
                return ResourceManager.GetString("configure_once", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new data ({0}) extend beyond the allocated space ({1}).
        /// </summary>
        internal static string data_0_beyond_allocated_1 {
            get {
                return ResourceManager.GetString("data_0_beyond_allocated_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detected unknown problems for DLR arguments in `{0}`: {1}.
        /// </summary>
        internal static string dlr_args_unknown_problems_0_1 {
            get {
                return ResourceManager.GetString("dlr_args_unknown_problems_0_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For DLR methods only one type is allowed as a return type..
        /// </summary>
        internal static string dlr_only_one_type_allowed {
            get {
                return ResourceManager.GetString("dlr_only_one_type_allowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal incorrect behaviour when accessing generic arg types. Please report: https://github.com/3F/Conari.
        /// </summary>
        internal static string failed_accessing_to_generic_types {
            get {
                return ResourceManager.GetString("failed_accessing_to_generic_types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed check. The result is `{0}`..
        /// </summary>
        internal static string failed_check_result_0 {
            get {
                return ResourceManager.GetString("failed_check_result_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field `{0}` is already defined in the chain. Reset/renew/or use other mode instead of `{1}`..
        /// </summary>
        internal static string field_0_defined_mode_1 {
            get {
                return ResourceManager.GetString("field_0_defined_mode_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrectly processed arguments. Lengths are not equal. {0} != {1}.
        /// </summary>
        internal static string incorrect_args_length_0_1 {
            get {
                return ResourceManager.GetString("incorrect_args_length_0_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or unavailable range at {0}..
        /// </summary>
        internal static string invalid_or_unavailable_range_at_0 {
            get {
                return ResourceManager.GetString("invalid_or_unavailable_range_at_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid pointer.
        /// </summary>
        internal static string invalid_pointer {
            get {
                return ResourceManager.GetString("invalid_pointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mangling `{0}` does not help. Check a correct name manually. Related issue: https://github.com/3F/Conari/issues/3.
        /// </summary>
        internal static string mangling_0_does_not_help {
            get {
                return ResourceManager.GetString("mangling_0_does_not_help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to null is not supported for C-strings..
        /// </summary>
        internal static string no_support_null_cstr {
            get {
                return ResourceManager.GetString("no_support_null_cstr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not yet implemented. https://github.com/3F/Conari.
        /// </summary>
        internal static string not_yet_impl {
            get {
                return ResourceManager.GetString("not_yet_impl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only {0} are supported yet..
        /// </summary>
        internal static string only_0_supported_yet {
            get {
                return ResourceManager.GetString("only_0_supported_yet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lpProcName `{0}` is not found..
        /// </summary>
        internal static string proc_not_found {
            get {
                return ResourceManager.GetString("proc_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support writing..
        /// </summary>
        internal static string stream_cant_write {
            get {
                return ResourceManager.GetString("stream_cant_write", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The used stream was unexpectedly disposed and can no longer be used..
        /// </summary>
        internal static string stream_disposed {
            get {
                return ResourceManager.GetString("stream_disposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sync wait limit reached: {0}.
        /// </summary>
        internal static string sync_limit_0 {
            get {
                return ResourceManager.GetString("sync_limit_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to decorate with `{0}` rules..
        /// </summary>
        internal static string trying_decorate_with_0 {
            get {
                return ResourceManager.GetString("trying_decorate_with_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/3F/Conari.
        /// </summary>
        internal static string url_src {
            get {
                return ResourceManager.GetString("url_src", resourceCulture);
            }
        }
    }
}
