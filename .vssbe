{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "    $(isPubRel = true)",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "    $(isPubRel = false)",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "",
          "$(revDeltaBase  = \"2017/01/01\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534) //limit of AssemblyVersion (2^16 - 2)",
          "",
          "",
          "$(netstamp  = $(TargetFrameworkVersion.Replace('v', '').Replace('.', '')))",
          "",
          "$(pDir      = \"Conari\")",
          "$(odir      = \"$(dbin)raw\")",
          "$(objDir    = $(RootObjDir))",
          "$(prjDir    = $(RootOutDir))",
          "",
          "$(pConariTest = \"ConariTest\")",
          "$(pUnLib = \"UnLib\")",
          "",
          "#[var +revBuild]",
          "#[var +bSha1]",
          "#[var +bName]",
          "#[var +bRevc]",
          "",
          "#[try",
          "{",
          "    #[IO delete.directory(\"$(dbin)\", true)]",
          "}catch{ F-53, SobaScript }]",
          "",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPkg",
      "Caption": "submodules and packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( !(#[IO exists.file(\"UnmanagedEmitCalli/UnmanagedEmitCalli.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init UnmanagedEmitCalli\", 300)]",
          "}]",
          "",
          "",
          "~ Packages",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    Call restore target to update nodes due to different options like MvsSlnFeatureHuid=true etc.",
          "    #[File scall(\".tools\\hMSBuild.bat\", \"~x ~c $(Configuration) -t:restore Conari.sln\", 200)]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVer",
      "Caption": "Update version number ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "Fix possible newlines when committing through GitHub web editor",
          "https://github.com/3F/7z.Libs/commit/67c83ced",
          "#[$(pVer = $(pVer.Trim()))]",
          "",
          "#[( ! $(isPubRel) ) {",
          "    #[IO replace.Regex(\"$(pDir)/ConariVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "}]",
          "",
          "#[IO replace.Regex(\"$(pDir)/Conari.csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActConariVersion",
      "Caption": "Update ConariVersion",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(isPubRel)) ",
          "{",
          "    #[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "    #[var revBuild  = #[$(",
          "        [System.TimeSpan]::FromTicks('$(",
          "            [MSBuild]::Subtract($(tNow), $(tBase))",
          "        )')",
          "        .TotalMinutes.ToString('0')",
          "    )]]",
          "                         ",
          "    #[var revBuild  = #[$(",
          "    ",
          "     [MSBuild]::Add(",
          "         $(revDeltaMin), ",
          "         $([MSBuild]::Modulo(",
          "             $(revBuild), ",
          "             $([MSBuild]::Subtract(",
          "                 $(revDeltaMax), $(revDeltaMin)",
          "              ))",
          "          ))",
          "      )",
          "      ",
          "    )]]",
          "    ",
          "    #[$(pVerBuild = \"$(pVer).$(revBuild)\")]",
          "    #[$(pVerBuild0 = $(pVerBuild))]",
          "}",
          "else",
          "{",
          "    #[$(revBuild = 0)]",
          "    #[$(pVerBuild = \"$(pVer)\")]",
          "    #[$(pVerBuild0 = \"$(pVerBuild).0\")]",
          "}]",
          "",
          "",
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.Conari",
          "{",
          "    using System;",
          "",
          "    public struct ConariVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"$(pVer)\";",
          "        public const string S_REV = \"$(revBuild)\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string BRANCH_SHA1 = \"%B_SHA1%\";",
          "        public const string BRANCH_NAME = \"%B_NAME%\";",
          "        public const string BRANCH_REVC = \"%B_REVC%\";",
          "",
          "        internal const string S_INFO        = S_NUM_REV + \"+\" + BRANCH_SHA1;",
          "        internal const string S_INFO_FULL   = S_INFO + \":\" + BRANCH_NAME + \"-\" + BRANCH_REVC;",
          "    }",
          "}]",
          "",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[($(isPubRel) ) { #[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]] }else{ #[var -isGit] }]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "    ",
          "    #[$(rxwPrintVersion = \"$(pVerBuild)+$(bSha1)\")]",
          "    #[$(rwwProductVersion = \"$(pVer)+$(bSha1)\")]",
          "    #[$(buildCfg = $(Configuration))]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]",
          "    #[$(buildCfg = '')]",
          "    #[$(rxwPrintVersion = \"$(pVerBuild)\")]",
          "    #[$(rwwProductVersion = \"$(pVer)\")]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")",
          "                   .Replace(\"%B_NAME%\", \"#[var bName]\")",
          "                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]",
          "",
          "",
          "#[File write(\"$(pDir)/ConariVersion.cs\"):#[$(tpl.Replace('\\n', '\\r\\n'))]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    Conari #[$(rwwProductVersion)]",
          "    ",
          "    ",
          "    Configuration:  #[$(Configuration)]",
          "    ",
          "    Platforms:      #[$(TargetFrameworks)]",
          "    ",
          "    Build number:   #[$(revBuild)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( $(isPubRel) ) { ",
          "    #[IO replace.Regex(\"$(pDir)/Conari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo)</BuildInfoVSSBE>\")]",
          "}else{",
          "    #[IO replace.Regex(\"$(pDir)/Conari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]",
          "}]",
          "",
          "#[IO copy.directory(\"\", \"$(objDir)\", true)]",
          "#[IO writeLine(\"$(objDir)/build-info.txt\"):#[$(buildInfo.Replace('\\n', '\\r\\n'))]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file",
          "(",
          "    {",
          "        \".version\",",
          "        \"LICENSE.txt\",",
          "        \"3rd-party-NOTICES.txt\",",
          "        \"Readme.md\",",
          "        \"changelog.txt\",",
          "        \"$(objDir)/build-info.txt\"",
          "    },",
          "    \"$(odir)/\", true",
          ")]",
          "",
          "",
          "#[$(_targets = $(TargetFrameworks:Conari))]",
          "#[$(_loop = true)]",
          "",
          "#[Box iterate(i = 0; $(_loop); i += 1): ",
          "  #[try",
          "  {",
          "",
          "    #[$(_target = $(_targets.Split(\";\")[$(i)].Trim()))]",
          "    #[(! \"$(_target)\" == \"\" )",
          "    {",
          "        #[IO copy.file",
          "        (",
          "            \"$(OutDir:Conari)/$(_target)/*.*\", ",
          "            \"$(odir)/lib/$(_target)/\", ",
          "            true,",
          "            {\"*.json\"}",
          "        )]",
          "    }]        ",
          "  }",
          "  catch { $(_loop = false) }]",
          "]",
          "",
          "#[IO copy.file(\"$(prjDir)$(pUnLib)\\$(cfgname)\\*.dll\", \"$(prjDir)$(pConariTest)\\$(cfgname)\\\\\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "zip archives etc.",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(isPubRel)) ",
          "{",
          "    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\Conari.$(rxwPrintVersion).zip\")]",
          "}]",
          "",
          "",
          "#[IO copy.file",
          "(",
          "    \"$(OutDir:Conari)/*$(pVer).nupkg\",",
          "    \"$(dbin)/\", ",
          "    true ",
          ")]"
        ]
      }
    }
  ]
}